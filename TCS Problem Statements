#Q1_weight of cloth -2000gm
#time to be taken- 25min 

#weight of cloth -4000gm
#time to taken- 45min

weight=int(input())
if weight<=0:
  print("Invalid")
elif weight>=1 and weight <=2000:
  print("Time instimated:25min")
elif  weight>=1 and weight <=3000:
  print("Time instimated:35min")
elif weight>=1 and weight <=4000:
  print("Time instimated:45min")
else:
  print("Overload")

#Q2_At a fun fair, a street vendor sells balloons in different colours. He sells N balloons in different colours (BI). The task is to find the balloon whose colour (odd) is present an odd number of times in the bunch of balloons.
Note: If more than one colour is odd in number, then the first colour in the array that is present odd number of times is displayed. The colours of the balloons can all be either upper-case or lower-case in the array. If all the inputs are
Example 1:
#Heading Heading 2
#•Z -> Value of N
#• [rgbbavy] B Elements B[0] to B[N-1], where each input element is sepirated by nen Iine.
#Output:
#[rabbayy]-> "r" colour balloon is present odd number of times in the bunch

Q_3)There is a JAR full of candies for sale at a mall counter. JAR has the capacity N, that is JAR can contain maximum N candies when JAR is full. At any point of time. 
JAR can have M number of Candies where M<=N. Candies are served to the customers. JAR is never remain empty as when last k candies are left. JAR if refilled with new candies in such a way that JAR get full. 
Write a code to implement above scenario. Display JAR at counter with available number of candies. Input should be the number of candies one customer can order at point of time. Update the JAR after each purchase and display JAR at Counter.

# Constants
N = 10  # Capacity of the jar

# Initialize jar
jar = [i for i in range(1, N+1)]

def display_jar():
    """Display the current state of the jar."""
    print(f"JAR at counter: [{', '.join(str(c) for c in jar)}]")

def serve_candies(num_candies):
    """Serve the given number of candies from the jar."""
    global jar
    if num_candies > len(jar):
        print("Not enough candies in the jar!")
        return
    jar = jar[:-num_candies]
    display_jar()

def refill_jar():
    """Refill the jar when there are only a few candies left."""
    global jar
    if len(jar) < N:
        # Refill the jar with candies from 1 to N
        jar = [i for i in range(1, N+1)]
        display_jar()

# Main loop
while True:
    # Get the number of candies a customer wants to order
    num_candies =4##int(input("Enter the number of candies you want to order: "))
    if num_candies > 0:
        serve_candies(num_candies)
    # Check if the jar needs to be refilled
        refill_jar()
